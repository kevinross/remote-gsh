{"name":"Remote Groovy Shell","tagline":"Lightweight debugging / management tool for Java servlet web applications","body":"# Remote Groovy Shell\r\nRemote Groovy Shell is a light weight debugging/management tool embbeded in Java servlet web applications.\r\n\r\nYou can interact with you application with groovy language in a bash like shell, jush like using groovysh.\r\n\r\nThrough this Remote Groovy Shell, you can do a lot of fantastic things to you application when its running, with the power of groovy language.\r\n\r\n## Motivations\r\n\r\n- I want to inspect bean properties without attach & debug jvm\r\n- I want to call specific method of a bean without add any fxxking jsps\r\n- I want to mock some behavior conveniently \r\n- I want to modify specific property of a bean and see what happens without editing the code and restarting the application\r\n- I want to hot replace some class\r\n\r\n## Features\r\n\r\n- Execute groovy command or local script file at remote server \r\n- Lightweighted, no additional dependencies(except groovy runtime), easy to embed into your project\r\n- Bash like client, no manual installation required, just one command to get everything done\r\n- Easy to extend to support various web application frameworks\r\n\r\n## User Guide\r\n\r\n### Some Examples\r\n\r\nTODO\r\n\r\n### Embbed rgsh in you project\r\n\r\n1.Add following jars into you classpath\r\n\r\n- [Remote Groovy Shell](http://g.cn) TODO\r\n- [Groovy Runtime](http://groovy.codehaus.org/Download) Any version greater than 1.8.6 is OK \r\n\r\nFor maven projects, add below content into you pom\r\n\r\n\tTODO\r\n\r\n\t<dependency>\r\n\t\t<groupId>org.codehaus.groovy</groupId>\r\n\t\t<artifactId>groovy-all</artifactId>\r\n\t\t<version>1.8.9</version>\r\n\t</dependency>\r\n            \r\n2.Add RgshFilter configuration into your *web.xml*\r\n\r\n**Attention:Exposing this filter may cause serious security problems, make sure you have ACL on this**\r\n\r\n\t<filter>\r\n\t\t<filter-name>Rgsh</filter-name>\r\n\t\t<filter-class>safrain.remotegsh.server.RgshFilter</filter-class>\r\n\t</filter>\r\n\t<filter-mapping>\r\n\t\t<filter-name>Rgsh</filter-name>\r\n\t\t<url-pattern>/admin/rgsh</url-pattern>\r\n\t</filter-mapping>\r\n\r\n**Filter init params**\r\n\r\n*charset* Request and Response character encoding, 'utf-8' as default.\r\n\r\n*initScriptPath* Init script classpath, 'safrain/remotegsh/server/init.groovy' as default.\r\n\r\n*initScriptCharset* Init script content charset, 'utf-8' as default.\r\n\r\n\r\n### Using shell client\r\n\r\nAssume that you configured RgshFilter in you application at http://localhost/, '/admin/rgsh' as url pattern:\r\n\r\n#### Show help screen\r\n\r\n\tcurl -s http://localhost/admin/rgsh\r\n\r\nThen you can follow the instructions shown on the screen.\r\n\r\n#### Install\r\n\r\n\tcurl -s http://localhost/admin/rgsh?r=install | bash\r\n\r\nTwo file will be downloaded to your current folder, an executable jar file *rgsh.jar* and a bash script  *rgsh*.\r\n\r\nYour server host and RgshFilter charset setting will be write into *rgsh* as its default settings.\r\n\r\n#### Starting interactive shell\r\n\r\n\t./rgsh\r\n\r\nThen feel free to use as a common groovy shell.\r\n\r\nUse -s switch to specify server host url.\r\n\r\nUse -r switch to specify request charset.\r\n\r\n#### Upload script and run\r\n\r\n\t./rgsh foobar.groovy\t\r\n\r\nUse -f switch to specify script file encoding\r\n\r\nUse -r switch to specify request charset.\r\n\r\n#### Default Settings\r\n\r\nJust Edit *rgsh* and modify DEFAULT\\_SERVER, DEFAULT\\_FILE\\_CHARSET and DEFAULT\\_REQUEST\\_CHARSET variable\r\n\r\n### Extending\r\n\r\n#### Custiom init script\r\n\r\nTODO\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}